package othello;

import java.awt.*;

class OthelloApp extends javax.swing.JFrame 
{
    // game related data-members
    private Board board;
    private GameController game;
    private boolean gameOn;
    private int winStatus;
    
    private boolean isAIOpponent;
    private Player AIPlayer;
    
    private Font defaultFont;
    private Font bigFont;
    
    public OthelloApp() 
    {
        initComponents();
        
        defaultFont = this.getGraphics().getFont();
        bigFont = new Font(Font.DIALOG, Font.BOLD, 48);
                
        this.setBounds(50, 20, 900, 690);
        
        chkSlow.setForeground(Board.whitePiece);
        lblStatus.setForeground(Board.whitePiece);
        chkInform.setForeground(Board.whitePiece);
        chkShowMoves.setForeground(Board.whitePiece);
        
        lblStatus.setBackground(Board.panelBackground);
        chkInform.setBackground(Board.panelBackground);
        chkSlow.setBackground(Board.panelBackground);
        chkShowMoves.setBackground(Board.panelBackground);
        
        isAIOpponent=false;
        AIPlayer=Player.Black;
        gameOn=false;
        board=null;
        game=null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnNewGame = new java.awt.Button();
        lblStatus = new java.awt.Label();
        chkInform = new java.awt.Checkbox();
        chkSlow = new java.awt.Checkbox();
        chkShowMoves = new java.awt.Checkbox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Othello");
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        btnNewGame.setLabel("New Game");
        btnNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGameActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 255, 255));
        lblStatus.setText("No game in progress");

        chkInform.setForeground(new java.awt.Color(255, 255, 255));
        chkInform.setLabel("Inform events");

        chkSlow.setForeground(new java.awt.Color(255, 255, 255));
        chkSlow.setLabel("Slow down moves");

        chkShowMoves.setForeground(new java.awt.Color(255, 255, 255));
        chkShowMoves.setLabel("Show potential moves");
        chkShowMoves.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkShowMovesItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkInform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSlow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkShowMoves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkShowMoves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkInform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkSlow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(656, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGameActionPerformed
        int choice=javax.swing.JOptionPane.showConfirmDialog(null, "Start new game? (YES: Player vs. Player, NO: Player(White) vs. Computer(Black), CANCEL: Don't start new game)", "New Game", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);
        
        if(choice==javax.swing.JOptionPane.CANCEL_OPTION) return;
        if(choice==javax.swing.JOptionPane.NO_OPTION) 
            isAIOpponent=true; 
        else 
            isAIOpponent=false;
        
        board = new Board();
        game = new GameController(this, Player.White);
        repaint();        
        
        gameOn=true;
    }//GEN-LAST:event_btnNewGameActionPerformed

    public void forceRedraw()
    {
        this.paint(this.getGraphics());
    }
    
    private void playerMove(Square s)
    {
        if(game.canPlayerMove(board,s)) {
            if(chkSlow.getState()) game.animate = true;
            game.playerMove(board,s,true);
            game.animate = false;
        } else {
            if(chkInform.getState()) javax.swing.JOptionPane.showMessageDialog(null,"Cannot place piece here.");
        }
        repaint();
        
        if(!game.canPlayerMove(board))
        {
            String cp = game.getCurrentTurn().toString();
            javax.swing.JOptionPane.showMessageDialog(null, cp+" has no potential moves, so switching turn to opponent.");
            game.switchTurn();
            repaint();
            
            if(!game.canPlayerMove(board))
            {
                // Opponent also cannot move! So, end the game!
                gameOn=false;
                Player winner = game.getWinner(board);
                
                int x[] = game.getPlayerCounts(board);
                String pc = "(White: " + x[0] + ", Black: " + x[1]+")";
                
                if(winner==null) 
                {
                    winStatus=-1;
                    javax.swing.JOptionPane.showMessageDialog(null, "Game drawn! "+pc);
                } else {
                    winStatus = winner.ordinal();
                    javax.swing.JOptionPane.showMessageDialog(null, "Game over! " + winner.toString() + " wins! "+pc);
                }
                
                return;
            }
        }
        
        if(isAIOpponent && game.getCurrentTurn()==AIPlayer)
        {
            forceRedraw();
            if(chkInform.getState()) javax.swing.JOptionPane.showMessageDialog(null,"Switching turn to Computer.");
            
            gameOn=false;
            setTitle("Othello - [ Computer Thinking... ]");
            Square x = AI.getAIMove(board,game);
            gameOn=true;
            
            playerMove(x);
        }
    }
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if(board==null || game==null || !gameOn) return;
        Square s = board.getSquareFromCoordinates(evt.getX(), evt.getY());
        if(s==null) return;
        
        playerMove(s);
    }//GEN-LAST:event_formMouseClicked

    private void chkShowMovesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkShowMovesItemStateChanged
        forceRedraw();
    }//GEN-LAST:event_chkShowMovesItemStateChanged
        
    @Override
    public void paint(Graphics g)
    {
        g.setColor(Board.panelBackground);
        g.fillRect(0,0,1000,1000);
        
        if(board!=null) 
        {
            board.drawBoard(g, chkShowMoves.getState(), game);
            this.setTitle("Othello - [ " + game.getCurrentTurn().toString() + "'s Turn ]");
            
            int x[] = game.getPlayerCounts(board);
            
            g.setFont(bigFont);
            g.setColor(Board.squareBackground);
            g.drawString("Black", 680, 200);
            g.drawString(x[1]+"", 680, 270);
            g.setColor(Board.whitePiece);
            g.drawString("White", 680, 450);
            g.drawString(x[0]+"", 680, 520);
            g.setFont(defaultFont);
            
            if(gameOn)
            {
                lblStatus.setText("Game in progress");
            } else {
                if(winStatus==-1)
                    lblStatus.setText("Game Drawn!");
                else
                    lblStatus.setText("Game Over! " + (winStatus==0 ? "White" : "Black") + " wins!");
            }
        } else {
            this.setTitle("Othello");
            lblStatus.setText("No game in progress!");
        }
        
        g.setFont(defaultFont);
        g.setColor(Board.whitePiece);
        g.drawString("Created by: Akash Nag",730,655);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnNewGame;
    private java.awt.Checkbox chkInform;
    private java.awt.Checkbox chkShowMoves;
    private java.awt.Checkbox chkSlow;
    private java.awt.Label lblStatus;
    // End of variables declaration//GEN-END:variables
}
